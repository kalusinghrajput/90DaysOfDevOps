Step 1 – Create a Volume
Step 2 – Attach a Volume to EC2 Instance
Step 3 – Verify if Volume is attached or not
Verify if Volume is attached or not by running linux command in Ec2-instance

$ lsblk

Step 4 – Check if the volume has any data using the following command.

If the above command output shows “/dev/xvdf: data“, it means your volume is empty.

$ sudo file -s /dev/xvdf

Step 5: Format the volume to the ext4 filesystem using the following command.

Alternatively, you can also use the xfs format. You have to use either ext4 or xfs.

$ sudo mkfs -t ext4 /dev/xvdf
$ sudo mkfs -t xfs /dev/xvdf

Step 6: Create a directory of your choice to mount our new ext4 volume. I am using the name
 “newvolume“. You can name it something meaningful to you.

$ sudo mkdir /newvolume

Step 7: Mount the volume to “newvolume” directory using the following command.

$ sudo mount /dev/xvdf /newvolume/

Step 8: cd into newvolume directory and check the disk space to validate the volume mount.

$ cd /newvolume

$ df -h .

The above command should show the free space in the newvolume directory.
To unmount the volume, use the unmount command as shown below..

$umount /dev/xvdf


##3################## Automount EBS Volume on Reboot ###############################


By default on every reboot, the EBS volumes other than the root volume will get unmounted. 
To enable automount, you need to make an entry in the /etc/fstab file.

Follow the steps given below to automount the EBS volume to the ec2 instance.

Step 9: Back up the /etc/fstab file.


$sudo cp /etc/fstab /etc/fstab.bak


Step 10: Open /etc/fstab file and make an entry in the following format.

$vi /etc/fstab

""device_name mount_point file_system_type fs_mntops fs_freq fs_passno""

For example,

/dev/xvdf       /newvolume   ext4    defaults,nofail        0       0


Step 10: Execute the following command to check if the fstab file has any errors.

$sudo mount -a

If the above command shows no error, it means your fstab entry is valid.

thanks
